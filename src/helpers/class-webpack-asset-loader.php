<?php
/**
 * Webpack Asset Loader
 *
 * Integrates Webpack-generated assets into WordPress. It supports build setups using the
 *
 * @wordpress/dependency-extraction-webpack-plugin plugin or @symfony/webpack-encore.
 *
 * @package Queulat
 */

namespace Queulat\Helpers;

use stdClass;

/**
 * Webpack Asset Loader
 *
 * Load files generated by Webpack into WordPress. It supports both
 *
 * @wordpress/dependency-extraction-webpack-plugin and @symfony/webpack-encore setups.
 */
class Webpack_Asset_Loader {

	/**
	 * The entrypoints file generated by Webpack.
	 *
	 * @var null|stdClass
	 */
	public $entrypoints;

	/**
	 * The manifest file generated by Webpack.
	 *
	 * @var null|stdClass
	 */
	public $manifest;

	/**
	 * The default strategy for loading JavaScript files.
	 *
	 * @var string
	 */
	protected string $default_js_strategy = 'defer';

	/**
	 * The default media type for CSS files.
	 *
	 * @var string
	 */
	protected string $default_css_media = 'all';

	/**
	 * Map of registered scripts, keyed by the unversioned basename.
	 *
	 * @var array
	 */
	protected array $registered_scripts = array();

	/**
	 * Map of registered styles, keyed by the unversioned basename.
	 *
	 * @var array
	 */
	protected array $registered_styles = array();

	/**
	 * The {$filename}.asset.php data for each asset, keyed by the unversioned basename.
	 *
	 * @var array
	 */
	protected array $asset_data = array();

	/**
	 * A unique prefix slug for the files managed by this instance.
	 *
	 * @var string
	 */
	public string $prefix;

	/**
	 * The base directory where built files are located (should contain manifest.json file).
	 *
	 * @var string
	 */
	public string $base_directory;

	/**
	 * Base URI for the assets.
	 *
	 * The full asset URI will be built by concatenating this with the manifest.json value
	 *
	 * @var string
	 */
	public string $base_uri;

	/**
	 * Build a new Webpack Asset Loader instance.
	 *
	 * @param string $prefix A unique prefix for the files managed by this instance, eg. "my-theme".
	 * @param string $base_directory The full-path to the base directory where built files are located, (assets/dist by default).
	 */
	public function __construct(
		string $prefix,
		string $base_directory = '',
		string $base_uri = ''
	) {
		$this->prefix = $prefix;
		if ( ! $base_directory ) {
			$base_directory = get_template_directory() . '/assets/dist';
		}
		$this->base_directory = untrailingslashit( $base_directory );
		if ( is_readable( $this->base_directory . '/manifest.json' ) ) {
			$this->manifest = wp_json_file_decode( $this->base_directory . '/manifest.json' );
		}
		if ( is_readable( $this->base_directory . '/entrypoints.json' ) ) {
			$this->entrypoints = wp_json_file_decode( $this->base_directory . '/entrypoints.json' );
		}
		if ( ! $base_uri ) {
			$base_uri = get_template_directory_uri() . '/assets/dist';
		}
		$this->base_uri = untrailingslashit( $base_uri );
	}

	/**
	 * Enqueue a javascript file.
	 *
	 * This method will enqueue a javascript file using the WordPress dependency manager. It loads
	 * dependencies declared in the asset's asset.php file and in the entrypoints.json file.
	 *
	 * @param string $handle The basename of the file to enqueue (manifest.json key).
	 * @return void
	 */
	public function enqueue_script( $handle ) {
		$js_dependencies = $this->get_js_dependencies( $handle );
		wp_enqueue_script(
			$this->get_file_handle( $handle ),
			$this->get_resource_uri( $handle ),
			$js_dependencies,
			$this->get_resource_version( $handle ),
			array(
				'strategy' => 'defer',
				'in_footer' => true,
			)
		);
	}

	/**
	 * Get the handle of js dependencies of the given script.
	 *
	 * If the the dependencies are built from the given webpack config, it will automatically
	 * register them with WordPress, using the prefix defined in the constructor.
	 *
	 * @param string $handle Basename of the script (manifest.json key).
	 * @return array List of dependencies handles.
	 */
	private function get_js_dependencies( string $handle ): array {
		$script_dependencies = array();

		// If $handle.asset.php exists, load dependencies from there.
		$asset_data = $this->get_resource_asset_data( $handle );
		if ( isset( $asset_data['dependencies'] ) ) {
			$script_dependencies = $asset_data['dependencies'];
		}

		$resource_filename = pathinfo( $handle, PATHINFO_FILENAME );

		// If entrypoints.json exists, load dependencies from there.
		if ( isset( $this->entrypoints->entrypoints->{$resource_filename}->js ) ) {
			foreach ( $this->entrypoints->entrypoints->{$resource_filename}->js as $js ) {
				$unversioned_js_basename = $this->get_unversioned_path( pathinfo( $js, PATHINFO_BASENAME ) );
				if ( $handle === $unversioned_js_basename ) {
					continue;
				}
				// These scripts might be not registered on WordPress, so we need to register them first.
				$script_dependencies[] = $this->register_script( $js );
			}
		}

		return array_unique( $script_dependencies );
	}

	/**
	 * Enqueue a CSS file.
	 *
	 * Dependencies have to be explicitly declared; will be automatically loaded if managed by
	 * this instance.
	 *
	 * @param string $handle Filename of the CSS file to enqueue (manifest.json key).
	 * @param array  $dependencies Handles of the CSS files this file depends on.
	 * @return void
	 */
	public function enqueue_style( string $handle, array $dependencies = array() ): void {
		$dependencies = $this->get_css_dependencies( $dependencies );
		wp_enqueue_style(
			$this->get_file_handle( $handle ),
			$this->get_resource_uri( $handle ),
			$dependencies,
			$this->get_resource_version( $handle ),
			$this->default_css_media
		);
	}

	/**
	 * Get the handles of the CSS dependencies.
	 *
	 * @param array $dependencies The list of dependencies to check.
	 * @return array Dependency handles. If managed by this instance, they will be prefixed.
	 */
	private function get_css_dependencies( array $dependencies ): array {
		$css_dependencies = array();
		foreach ( $dependencies as $dep ) {
			$css_dependencies[] = $this->register_style( $dep );
		}
		return array_unique( $css_dependencies );
	}

	/**
	 * Register a script with WordPress.
	 *
	 * @param string $path The path to the script file.
	 * @return string The prefixed handle of the script.
	 */
	public function register_script( string $path ): string {
		$basename = pathinfo( $path, PATHINFO_BASENAME );
		$unversioned = $this->get_unversioned_path( $basename );
		if ( ! isset( $this->manifest->{$unversioned} ) ) {
			return $path;
		}
		if ( isset( $this->registered_scripts[ $unversioned ] ) ) {
			return $this->registered_scripts[ $unversioned ];
		}
		$prefixed_handle = $this->get_file_handle( $basename );
		$script_url      = $this->get_resource_uri( $basename );
		$dep_version     = $this->get_resource_version( pathinfo( $path, PATHINFO_BASENAME ) );
		wp_register_script(
			$prefixed_handle,
			$script_url,
			array(),
			$dep_version,
			true
		);
		$this->registered_scripts[ $basename ] = $prefixed_handle;
		return $prefixed_handle;
	}

	/**
	 * Register a CSS file with WordPress.
	 *
	 * @param string $handle Unprefixed handle of the CSS file.
	 * @return string
	 */
	public function register_style( string $handle ): string {
		if ( ! isset( $this->manifest->{$handle} ) ) {
			return $handle;
		}
		if ( isset( $this->registered_styles[ $handle ] ) ) {
			return $this->registered_styles[ $handle ];
		}
		$prefixed_handle = $this->get_file_handle( $handle );
		wp_register_style(
			$prefixed_handle,
			$this->get_resource_uri( $handle ),
			array(),
			$this->get_resource_version( $handle ),
			$this->default_css_media
		);
		$this->registered_styles[ $handle ] = $prefixed_handle;
		return $prefixed_handle;
	}

	/**
	 * Get the URI for a file on the theme directory
	 *
	 * @param string $string Path to the file.
	 * @return string Normalized URL to the file.
	 */
	private function get_file_uri( string $string ): string {
		$rel_file_path  = pathinfo( wp_parse_url(  $string, PHP_URL_PATH ), PATHINFO_DIRNAME );
		$file_uri = ( strpos( $string , '/' ) === 0 ? untrailingslashit( $this->base_uri ) : $this->base_uri ) . $string;
		$rel_path_count_in_uri = substr_count( $file_uri, $rel_file_path );
		$rel_file_path_in_uri = strpos( $file_uri, $rel_file_path );
		$normalized_path =
			$rel_path_count_in_uri > 1 ?
			substr_replace( $file_uri, '', $rel_file_path_in_uri, strlen( $rel_file_path ) ) :
			$file_uri;
		return $normalized_path;
	}

	/**
	 * Get the URI of a resource.
	 *
	 * This method will return the URI of a resource, using the manifest.json file to get the correct
	 * filename (with version number) to enqueue.
	 *
	 * @param string $handle The path to the file to enqueue.
	 * @return string The full URL to the resource.
	 */
	private function get_resource_uri( string $handle ): string {
		// Detect if handle has a versioned filename.
		if ( isset( $this->manifest->{$handle} ) ) {
			return $this->get_file_uri( $this->manifest->{$handle} );
		}

		// Remove version number from handle.
		$unversioned = $this->get_unversioned_path( $handle );
		return isset( $this->manifest->{$unversioned} ) ? $this->get_file_uri( $this->manifest->{$unversioned} ) : '';
	}

	/**
	 * Get the asset data from the {$filename}asset.php file.
	 *
	 * This data is generated by the @wordpress/dependency-extraction-webpack-plugin and contains
	 * information about the asset's dependencies and version.
	 *
	 * @param string $handle Path to the desired asset.
	 * @return null|array Asset data or null if it's not found.
	 */
	private function get_resource_asset_data( string $handle ): ?array {
		$unversioned_handle = $this->get_unversioned_path( $handle );
		if ( isset( $this->asset_data[ $unversioned_handle ] ) ) {
			return false === $this->asset_data[ $unversioned_handle ] ? null : $this->asset_data[ $unversioned_handle ];
		}
		if ( ! isset( $this->manifest->{$unversioned_handle} ) ) {
			return null;
		}
		// The basename might be versioned, let's get the correct name from the manifest file.
		$resource_basename   = pathinfo( $this->manifest->{$unversioned_handle}, PATHINFO_FILENAME );
		$resource_asset_path = trailingslashit( $this->base_directory ) . $resource_basename . '.asset.php';
		if ( is_readable( $resource_asset_path ) ) {
			$this->asset_data[ $unversioned_handle ] = require $resource_asset_path;
			return $this->asset_data[ $unversioned_handle ];
		}
		$this->asset_data[ $unversioned_handle ] = false;
		return null;
	}

	/**
	 * Clean the version number from a path.
	 *
	 * Removes the content hash from a production asset path.
	 *
	 * @param string $path The desired path.
	 * @return string The path without the version number.
	 */
	private function get_unversioned_path( string $path ): string {
		$manifest_key = pathinfo( $path, PATHINFO_BASENAME );
		if ( isset( $this->manifest->{$manifest_key} ) ) {
			return $path;
		}

		$path_parts = explode( '.', $path );

		// Remove version number from handle.
		array_splice( $path_parts, -2, 1, '' );
		return implode( '.', array_filter( $path_parts ) );
	}

	/**
	 * Get the handle for a file using the instance prefix.
	 *
	 * @param string $path Path to the file.
	 * @return string File path prefixed with the string defined on the constructor.
	 */
	private function get_file_handle( string $path ): string {
		$filename = pathinfo( $this->get_unversioned_path( $path ), PATHINFO_FILENAME );
		return $this->prefix . '-' . $filename;
	}

	/**
	 * Get the version of a resource.
	 *
	 * If the file has a content hash, returns "null" to avoid the version parameter. It loads info
	 * from the asset.php file, the entrypoints.json file or the file modification time otherwise.
	 *
	 * @param string $handle The path to the file that will be enqueued.
	 * @return null|string Version string or null if the file has a content hash.
	 */
	private function get_resource_version( string $handle ): ?string {
		if ( isset( $this->manifest->{$handle} ) ) {
			// If using hashes on the manifest basename, return null because version is already
			// in it. Eg: "main.12345678.js".
			$manifest_basename = pathinfo( $this->manifest->{$handle}, PATHINFO_BASENAME );
			if ( $handle !== $manifest_basename ) {
				return null;
			}
		}

		// Try to get info from the "{$filename}.asset.php" file.
		$asset_data = $this->get_resource_asset_data( $handle );
		if ( isset( $asset_data['version'] ) ) {
			return substr( $asset_data['version'], 0, 8 );
		}

		// Check whether an entrypoints.json hash exists.
		$resource_key = isset( $this->manifest->{$handle} ) ? $this->manifest->{$handle} : null;
		if ( isset( $this->entrypoints->integrity->{$resource_key} ) ) {
			$parts = explode( '-', $this->entrypoints->integrity->{$resource_key} );
			$hash  = end( $parts );
			return substr( preg_replace( '/[^\w]/', '', $hash ), 0, 8 );
		}

		// Use the file modification time as a fallback.
		if ( isset( $this->manifest->{$handle} ) ){
			$resource_path = trailingslashit( $this->base_directory ) . pathinfo( $this->manifest->{$handle}, PATHINFO_BASENAME );
			return filemtime( $resource_path );
		}

		return null;
	}
}
